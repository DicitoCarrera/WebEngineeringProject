{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>Welcome to the official documentation for our website! This app is designed to help you learn programming efficiently and interactively. Our platform provides structured lessons on various programming languages, tools, and techniques, empowering you to enhance your coding skills step by step.</p> <p>With a user-friendly interface, a variety of interactive resources, and personalized features, you can easily begin your coding journey or advance your existing skills.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Interactive Lessons: Dive into hands-on tutorials for popular programming   languages like Python, Java, and C.</li> <li>Variety of Resources: Get access to a wide range of resources including   study guides, coding exercises, and real-time code challenges.</li> <li>Responsive Design: The web app is fully responsive, ensuring a smooth   learning experience on both desktop and mobile devices.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#step-1-create-an-account","title":"Step 1: Create an Account","text":"<p>To access all the features of the web app, sign up for a free account. Simply navigate to the Sign Up page and enter your details.</p>"},{"location":"#step-2-browse-courses","title":"Step 2: Browse Courses","text":"<p>Explore available lessons from the Courses section. Choose a programming language or topic that interests you, and start learning immediately!</p>"},{"location":"#step-3-track-progress","title":"Step 3: Track Progress","text":"<p>Once you're logged in, your personalized dashboard will show your current lessons, achievements, and recommendations for your next learning steps.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions from developers, designers, and content creators. If you'd like to contribute to our platform.</p> <p>We hope you have a great experience learning with us! Let's get started on your coding journey today! \ud83d\ude80</p>"},{"location":"#first-code-snippet","title":"First code snippet","text":"<p>fetch(\"http://localhost:5001/lessons\")         .then((response) =&gt; response.json())         .then((data) =&gt; {           const lessonsContainer = document.getElementById(             \"lessons-container\",           );</p> <pre><code>      data.forEach((lesson) =&gt; {\n        console.log(`lesson.title: ${lesson.title}`);\n        if (lesson.title === lessonTitel) {\n          const lessonElement = document.createElement(\"article\");\n          lessonElement.classList.add(\"post\");\n          lessonElement.innerHTML = `\n                            &lt;header&gt;\n                                &lt;div class=\"title\"&gt;\n                                    &lt;h2&gt;&lt;a href=\"#\"&gt;${lesson.title}&lt;/a&gt;&lt;/h2&gt;\n                                    &lt;p&gt;${lesson.description}&lt;/p&gt;\n                                &lt;/div&gt;\n</code></pre>"},{"location":"#second-one","title":"Second one","text":"<p>require([\"vs/editor/editor.main\"], function () {     const editorContainer = document.getElementById(\"editor-container\");     const languageSelector = document.getElementById(\"language-selector\");     let editor;</p> <pre><code>function createEditor(language) {\n  editor = monaco.editor.create(editorContainer, {\n    value: [\n      \"function helloWorld() {\",\n      '\\tconsole.log(\"Hello, world!\");',\n      \"}\",\n    ].join(\"\\n\"),\n    language: language,\n    theme: \"vs-dark\",\n  });\n}\n</code></pre>"},{"location":"backend/","title":"Backend Service","text":""},{"location":"backend/#overview","title":"Overview","text":"<p>This document provides a technical overview of the <code>backend.js</code> entry point for the backend service in the application. The file sets up an Express.js server that handles routing, middleware, authentication, session management, CORS handling, error handling, and logging for the backend application.</p>"},{"location":"backend/#dependencies","title":"Dependencies","text":"<p>The <code>backend.js</code> file uses the following dependencies:</p> <ul> <li><code>express</code>: A web framework for Node.js, used to create the server and   handle routing.</li> <li><code>body-parser</code>: Middleware to parse incoming request bodies.</li> <li><code>express-session</code>: Middleware for managing user sessions.</li> <li><code>cookie-parser</code>: Middleware for parsing cookies in incoming requests.</li> <li><code>cors</code>: Middleware for enabling Cross-Origin Resource Sharing (CORS).</li> <li><code>usersRoutes</code>: Custom routes for authentication-related operations.</li> <li><code>lessonsRoutes</code>: Custom routes for lesson-related operations.</li> </ul>"},{"location":"backend/#server-configuration","title":"Server Configuration","text":"<p>The server is configured to listen on port <code>5001</code>. The following middleware and routes are used in the backend service:</p>"},{"location":"backend/#express-app-initialization","title":"Express App Initialization","text":"<p>The server is initialized using the Express framework:</p> <pre><code>const app = express();\n</code></pre>"},{"location":"backend/#middleware-configuration","title":"Middleware Configuration","text":"<p>cookieParser: Parses cookies from incoming requests.</p> <pre><code>app.use(cookieParser());\n</code></pre> <p>bodyParser.urlencoded: Parses URL-encoded bodies (e.g., form submissions).</p> <pre><code>app.use(bodyParser.urlencoded({ extended: false }));\n</code></pre> <p>bodyParser.json: Parses incoming requests with JSON payloads.</p> <pre><code>app.use(bodyParser.json());\n</code></pre> <p>cors: Configures CORS to allow requests from <code>http://localhost:3000</code> with specific HTTP methods and headers.</p> <pre><code>app.use(cors({\n  origin: \"http://localhost:3000\",\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n  allowedHeaders: [\"Content-Type\", \"Authorization\"],\n}));\n</code></pre> <p>session: Initializes session handling using express-session. It uses a secret key for encrypting the session data and stores session data in memory.</p> <pre><code>app.use(session({\n  secret: \"your_secret_key\",\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: false }, // Set to true if using HTTPS\n}));\n</code></pre>"},{"location":"backend/#routes","title":"Routes","text":"<p>usersRoutes: Handles all authentication-related routes, such as login and registration.</p> <p>lessonsRoutes: Handles routes related to lessons, like retrieving and managing lessons.</p> <pre><code>app.use(\"/auth\", usersRoutes);\napp.use(\"/lessons\", lessonsRoutes);\n</code></pre> <p>This route checks the session for an authenticated user. If the user is authenticated (i.e., <code>req.session.user</code> exists), it sends a welcome message. Otherwise, it sends a 401 Unauthorized error.</p>"},{"location":"backend/#middleware-function-logrequest","title":"Middleware Function: logRequest","text":"<p>A custom middleware function is defined to log each incoming request, including the HTTP method and the IP address of the requester.</p> <pre><code>const logRequest = (req, res, next) =&gt; {\n  console.log(`Received a ${req.method} request from ${req.ip}`);\n  next();\n};\n</code></pre> <p>This middleware is applied to all incoming requests by using <code>app.use(logRequest)</code>.</p>"},{"location":"backend/#error-handling","title":"Error Handling","text":"<p>A general error handler is defined to catch any internal server errors and send a response to the client.</p> <pre><code>app.use((err, req, res, next) =&gt; {\n  console.error(\"An error occurred:\", err.message);\n  res.status(500).send({ error: \"Internal Server Error\" });\n});\n</code></pre> <p>Additionally, there is an error handler for unhandled routes:</p> <pre><code>app.use((req, res) =&gt; {\n  console.log(`Unhandled route accessed: ${req.method} ${req.originalUrl}`);\n  res.status(404).send({ error: \"Not Found\" });\n});\n</code></pre>"},{"location":"backend/#test-route-optional","title":"Test Route (Optional)","text":"<p>A test route is provided to verify if the server is running properly:</p> <pre><code>app.get(\"/\", (req, res) =&gt; {\n  console.log(\"Request received at root endpoint.\");\n  res.send(\"Backend is running!\");\n});\n</code></pre>"},{"location":"backend/#server-listening","title":"Server Listening","text":"<p>Finally, the Express server is configured to listen on port <code>5001</code>, and logs a message when the server starts:</p> <pre><code>app.listen(port, () =&gt; {\n  console.log(`Server is running on port ${port}`);\n});\n</code></pre>"},{"location":"backend/#conclusion","title":"Conclusion","text":"<p>This <code>backend.js</code> file sets up an Express.js server with basic functionality, including middleware for parsing requests, managing user sessions, logging incoming requests, and handling errors. It also provides protected routes and integrates authentication and lesson-related routes through custom modules (<code>usersRoutes</code> and <code>lessonsRoutes</code>). The server supports CORS, error handling for unhandled routes, and includes a test route for verifying the backend service's status. This server is essential for the backend service of the application and ensures secure, session-based interactions for users.</p>"},{"location":"backend/database/auth-db/","title":"Auth DB","text":""},{"location":"backend/database/auth-db/#overview","title":"Overview","text":"<p><code>usersDB.js</code> is a utility module that encapsulates all database operations for managing user-related data in a SQLite database. It contains functions for creating a new user, fetching a user by username or ID, and updating user profile information. All database interactions are abstracted into these functions, allowing the <code>usersRoutes.js</code> file to focus solely on HTTP handling. Here is the table for the <code>users</code> as requested:</p>"},{"location":"backend/database/auth-db/#database-table-schema","title":"Database Table Schema","text":"<p>The <code>users</code> table is defined as follows:</p> Column Name Data Type Description <code>id</code> INTEGER Primary key. Unique identifier for each user. <code>username</code> TEXT The username of the user, used for login. <code>email</code> TEXT The email address of the user. <code>password</code> TEXT The hashed password for the user."},{"location":"backend/database/auth-db/#functions","title":"Functions","text":""},{"location":"backend/database/auth-db/#1-createuser","title":"1. <code>createUser</code>","text":""},{"location":"backend/database/auth-db/#description","title":"Description","text":"<p>Creates a new user record in the database with the provided username, email, and password</p>"},{"location":"backend/database/auth-db/#parameters","title":"Parameters","text":"<ul> <li><code>username</code> (string): The username of the user to be created.</li> <li><code>email</code> (string): The email address of the user to be created.</li> <li><code>password</code> (string): The hashed password of the user to be created.</li> <li><code>callback</code> (function): The callback function to be invoked after the operation   completes. It receives two arguments:</li> <li><code>err</code>: The error message, if any, encountered during the operation.</li> <li><code>userId</code>: The <code>id</code> of the newly created user.</li> </ul>"},{"location":"backend/database/auth-db/#example-usage","title":"Example Usage","text":"<pre><code>usersDB.createUser(\n  \"johndoe\",\n  \"john@example.com\",\n  hashedPassword,\n  (err, userId) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log(`User created with ID: ${userId}`);\n  },\n);\n</code></pre>"},{"location":"backend/database/auth-db/#2-getuserbyusername","title":"2. <code>getUserByUsername</code>","text":""},{"location":"backend/database/auth-db/#description_1","title":"Description","text":"<p>Retrieves a user from the database by their username.</p>"},{"location":"backend/database/auth-db/#parameters_1","title":"Parameters","text":"<ul> <li><code>username</code> (string): The username of the user to retrieve.</li> <li><code>callback</code> (function): The callback function to be invoked after the operation   completes. It receives two arguments:</li> <li><code>err</code>: The error message, if any, encountered during the operation.</li> <li><code>user</code>: The user object containing the user's data (<code>id</code>, <code>username</code>,     <code>email</code>, <code>password</code>), or <code>null</code> if no user was found.</li> </ul>"},{"location":"backend/database/auth-db/#example-usage_1","title":"Example Usage","text":"<pre><code>usersDB.getUserByUsername(\"johndoe\", (err, user) =&gt; {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  if (!user) {\n    console.log(\"User not found\");\n    return;\n  }\n  console.log(user); // User object will be logged\n});\n</code></pre>"},{"location":"backend/database/auth-db/#3-getuserbyid","title":"3. <code>getUserById</code>","text":""},{"location":"backend/database/auth-db/#description_2","title":"Description","text":"<p>Retrieves a user from the database by their unique <code>id</code>.</p>"},{"location":"backend/database/auth-db/#parameters_2","title":"Parameters","text":"<ul> <li><code>id</code> (integer): The unique ID of the user to retrieve.</li> <li><code>callback</code> (function): The callback function to be invoked after the operation   completes. It receives two arguments:</li> <li><code>err</code>: The error message, if any, encountered during the operation.</li> <li><code>user</code>: The user object containing the user's data (<code>id</code>, <code>username</code>,     <code>email</code>, <code>password</code>), or <code>null</code> if no user was found.</li> </ul>"},{"location":"backend/database/auth-db/#example-usage_2","title":"Example Usage","text":"<pre><code>usersDB.getUserById(1, (err, user) =&gt; {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  if (!user) {\n    console.log(\"User not found\");\n    return;\n  }\n  console.log(user); // User object will be logged\n});\n</code></pre>"},{"location":"backend/database/auth-db/#4-updateuserprofile","title":"4. <code>updateUserProfile</code>","text":""},{"location":"backend/database/auth-db/#description_3","title":"Description","text":"<p>Updates a user's profile information (username, email, password) in the database</p>"},{"location":"backend/database/auth-db/#parameters_3","title":"Parameters","text":"<ul> <li><code>id</code> (integer): The unique ID of the user whose profile is to be updated.</li> <li><code>username</code> (string): The new username to set.</li> <li><code>email</code> (string): The new email to set.</li> <li><code>password</code> (string): The new hashed password to set.</li> <li><code>callback</code> (function): The callback function to be invoked after the operation   completes. It receives two arguments:</li> <li><code>err</code>: The error message, if any, encountered during the operation.</li> <li><code>changes</code>: The number of rows affected by the update (0 if no rows were     updated, which usually means the user was not found).</li> </ul>"},{"location":"backend/database/auth-db/#example-usage_3","title":"Example Usage","text":"<pre><code>usersDB.updateUserProfile(\n  1,\n  \"newusername\",\n  \"newemail@example.com\",\n  hashedPassword,\n  (err, changes) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    if (changes === 0) {\n      console.log(\"User not found\");\n      return;\n    }\n    console.log(\"Profile updated successfully\");\n  },\n);\n</code></pre>"},{"location":"backend/database/auth-db/#error-handling","title":"Error Handling","text":"<ul> <li> <p>Each function in <code>usersDB.js</code> passes any encountered errors through to the   callback function in the form of an <code>err</code> argument. If no error occurs, the   callback will handle the result of the operation (e.g., newly created user ID,   updated profile changes).</p> </li> <li> <p>Common errors could include:</p> </li> <li>Database connection issues</li> <li>Integrity constraint violations (e.g., attempting to insert a duplicate     username or email)</li> <li>User not found errors when querying by ID or username</li> </ul>"},{"location":"backend/database/auth-db/#dependencies","title":"Dependencies","text":"<ul> <li><code>sqlite3</code>: This module is used to interact with the SQLite database,   providing methods for querying and modifying the database.</li> </ul> <pre><code>npm install sqlite3\n</code></pre>"},{"location":"backend/database/auth-db/#exported-functions","title":"Exported Functions","text":"<p>The following functions are available for use:</p> <ul> <li><code>createUser</code></li> <li><code>getUserByUsername</code></li> <li><code>getUserById</code></li> <li><code>updateUserProfile</code></li> </ul> <p>These functions allow interaction with the <code>users</code> table in the database. The function signatures have been designed to use callback-based asynchronous execution for handling results.</p>"},{"location":"backend/database/auth-db/#usage-example","title":"Usage Example","text":"<p>Here is an example of how to use the <code>usersDB.js</code> module in your Express routes:</p> <pre><code>const usersDB = require(\"../database/users/usersDB\");\n\n// Example usage of createUser function\nusersDB.createUser(\n  \"johndoe\",\n  \"john@example.com\",\n  hashedPassword,\n  (err, userId) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log(`User created with ID: ${userId}`);\n  },\n);\n\n// Example usage of getUserByUsername function\nusersDB.getUserByUsername(\"johndoe\", (err, user) =&gt; {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  if (!user) {\n    console.log(\"User not found\");\n    return;\n  }\n  console.log(user);\n});\n</code></pre>"},{"location":"backend/database/auth-db/#summary","title":"Summary","text":"<p><code>usersDB.js</code> provides a set of functions that facilitate all interactions with the user-related database tables. This abstraction helps separate the database logic from the HTTP handling in <code>usersRoutes.js</code>, making the code more maintainable and modular.</p>"},{"location":"backend/database/lessons-db/","title":"Lessons DB","text":""},{"location":"backend/database/lessons-db/#overview","title":"Overview","text":"<p>The <code>lessonsDB.js</code> file encapsulates all the database operations related to the lessons in the application. It provides functions for creating, retrieving, updating, and deleting lessons in the database. This file abstracts away the direct interaction with the database, allowing the routes to only focus on handling HTTP requests and responses.</p> <p>This file uses SQLite as the database engine, and all lessons are stored in an in-memory SQLite database. It includes a <code>lessons</code> table that stores information about the lessons, including title, description, date, teacher, language, explanation, and content.</p>"},{"location":"backend/database/lessons-db/#database-table-schema","title":"Database Table Schema","text":"<p>The <code>lessons</code> table is defined as follows:</p> Column Name Data Type Description <code>id</code> INTEGER Primary key. Unique identifier for each lesson. <code>title</code> TEXT The title of the lesson. <code>description</code> TEXT A brief description of the lesson. <code>date</code> TEXT The date when the lesson is scheduled or occurred. <code>teacher</code> TEXT The teacher or instructor associated with the lesson. <code>language</code> TEXT The programming language or subject of the lesson. <code>explanation</code> TEXT An explanation of the lesson's content. <code>content</code> TEXT Detailed content or material for the lesson."},{"location":"backend/database/lessons-db/#functions","title":"Functions","text":""},{"location":"backend/database/lessons-db/#1-createlesson","title":"1. <code>createLesson</code>","text":""},{"location":"backend/database/lessons-db/#description","title":"Description","text":"<p>This function inserts a new lesson into the database. It takes the lesson details as input and inserts them into the <code>lessons</code> table.</p>"},{"location":"backend/database/lessons-db/#parameters","title":"Parameters","text":"<ul> <li><code>title</code> (string): The title of the lesson.</li> <li><code>description</code> (string): A brief description of the lesson.</li> <li><code>date</code> (string): The date of the lesson.</li> <li><code>teacher</code> (string): The name of the teacher or instructor.</li> <li><code>language</code> (string): The programming language or subject of the lesson.</li> <li><code>explanation</code> (string): A short explanation of the lesson's content.</li> <li><code>content</code> (string): The full content or material for the lesson.</li> <li><code>callback</code> (function): A callback function that handles the result or error.   It receives two arguments:</li> <li><code>err</code> (Error): An error object if an error occurs during the database     operation.</li> <li><code>lessonId</code> (number): The <code>id</code> of the newly created lesson.</li> </ul>"},{"location":"backend/database/lessons-db/#usage","title":"Usage","text":"<pre><code>lessonsDB.createLesson(\n  title,\n  description,\n  date,\n  teacher,\n  language,\n  explanation,\n  content,\n  (err, lessonId) =&gt; {\n    if (err) {\n      console.log(\"Error creating lesson:\", err);\n      return;\n    }\n    console.log(`Lesson created with ID: ${lessonId}`);\n  },\n);\n</code></pre>"},{"location":"backend/database/lessons-db/#2-getalllessons","title":"2. <code>getAllLessons</code>","text":""},{"location":"backend/database/lessons-db/#description_1","title":"Description","text":"<p>This function retrieves all lessons from the database.</p>"},{"location":"backend/database/lessons-db/#parameters_1","title":"Parameters","text":"<ul> <li><code>callback</code> (function): A callback function that handles the result or error.   It receives two arguments:</li> <li><code>err</code> (Error): An error object if an error occurs during the database     operation.</li> <li><code>rows</code> (Array): An array of lesson objects, each representing a lesson in     the <code>lessons</code> table.</li> </ul>"},{"location":"backend/database/lessons-db/#usage_1","title":"Usage","text":"<pre><code>lessonsDB.getAllLessons((err, rows) =&gt; {\n  if (err) {\n    console.log(\"Error fetching lessons:\", err);\n    return;\n  }\n  console.log(\"All lessons:\", rows);\n});\n</code></pre>"},{"location":"backend/database/lessons-db/#3-getlessonbyid","title":"3. <code>getLessonById</code>","text":""},{"location":"backend/database/lessons-db/#description_2","title":"Description","text":"<p>This function retrieves a specific lesson by its <code>id</code>.</p>"},{"location":"backend/database/lessons-db/#parameters_2","title":"Parameters","text":"<ul> <li><code>id</code> (number): The ID of the lesson to retrieve.</li> <li><code>callback</code> (function): A callback function that handles the result or error.   It receives two arguments:</li> <li><code>err</code> (Error): An error object if an error occurs during the database     operation.</li> <li><code>row</code> (Object): A lesson object representing the lesson with the specified     <code>id</code>.</li> </ul>"},{"location":"backend/database/lessons-db/#usage_2","title":"Usage","text":"<pre><code>lessonsDB.getLessonById(lessonId, (err, row) =&gt; {\n  if (err) {\n    console.log(\"Error fetching lesson:\", err);\n    return;\n  }\n  console.log(\"Lesson found:\", row);\n});\n</code></pre>"},{"location":"backend/database/lessons-db/#4-updatelesson","title":"4. <code>updateLesson</code>","text":""},{"location":"backend/database/lessons-db/#description_3","title":"Description","text":"<p>This function updates a lesson in the database based on the lesson's <code>id</code>. It takes new values for the lesson and updates the corresponding fields in the <code>lessons</code> table.</p>"},{"location":"backend/database/lessons-db/#parameters_3","title":"Parameters","text":"<ul> <li><code>id</code> (number): The ID of the lesson to update.</li> <li><code>title</code> (string): The new title of the lesson.</li> <li><code>description</code> (string): The new description of the lesson.</li> <li><code>date</code> (string): The new date for the lesson.</li> <li><code>teacher</code> (string): The new teacher's name.</li> <li><code>language</code> (string): The new language or subject of the lesson.</li> <li><code>explanation</code> (string): The new explanation of the lesson.</li> <li><code>content</code> (string): The new content for the lesson.</li> <li><code>callback</code> (function): A callback function that handles the result or error.   It receives two arguments:</li> <li><code>err</code> (Error): An error object if an error occurs during the database     operation.</li> <li><code>changes</code> (number): The number of rows affected by the update. If <code>changes</code>     is <code>0</code>, the lesson was not found.</li> </ul>"},{"location":"backend/database/lessons-db/#usage_3","title":"Usage","text":"<pre><code>lessonsDB.updateLesson(\n  lessonId,\n  title,\n  description,\n  date,\n  teacher,\n  language,\n  explanation,\n  content,\n  (err, changes) =&gt; {\n    if (err) {\n      console.log(\"Error updating lesson:\", err);\n      return;\n    }\n    if (changes === 0) {\n      console.log(\"Lesson not found.\");\n      return;\n    }\n    console.log(\"Lesson updated successfully\");\n  },\n);\n</code></pre>"},{"location":"backend/database/lessons-db/#5-deletelesson","title":"5. <code>deleteLesson</code>","text":""},{"location":"backend/database/lessons-db/#description_4","title":"Description","text":"<p>This function deletes a lesson from the database by its <code>id</code>.</p>"},{"location":"backend/database/lessons-db/#parameters_4","title":"Parameters","text":"<ul> <li><code>id</code> (number): The ID of the lesson to delete.</li> <li><code>callback</code> (function): A callback function that handles the result or error.   It receives two arguments:</li> <li><code>err</code> (Error): An error object if an error occurs during the database     operation.</li> <li><code>changes</code> (number): The number of rows affected by the deletion. If     <code>changes</code> is <code>0</code>, the lesson was not found.</li> </ul>"},{"location":"backend/database/lessons-db/#usage_4","title":"Usage","text":"<pre><code>lessonsDB.deleteLesson(lessonId, (err, changes) =&gt; {\n  if (err) {\n    console.log(\"Error deleting lesson:\", err);\n    return;\n  }\n  if (changes === 0) {\n    console.log(\"Lesson not found.\");\n    return;\n  }\n  console.log(\"Lesson deleted successfully\");\n});\n</code></pre>"},{"location":"backend/database/lessons-db/#conclusion","title":"Conclusion","text":"<p>The <code>lessonsDB.js</code> file encapsulates all database-related operations for managing lessons in the application. By moving the database logic into a separate module, we achieve a cleaner separation of concerns between the HTTP routing and the database interaction. This makes the codebase more modular, maintainable, and testable.</p>"},{"location":"backend/routes/auth-routes/","title":"Authentication and Profile Routes","text":"<p>This document provides an overview of the authentication and profile management routes in the application. These routes handle user registration, login, profile retrieval and updating, and user logout. The routes are defined using Express.js and interact with a SQLite database.</p>"},{"location":"backend/routes/auth-routes/#routes-overview","title":"Routes Overview","text":"<p>The routes in this section are part of the usersRoutes and are responsible for user management. The following operations are supported:</p> <ul> <li>POST /register: Registers a new user.</li> <li>POST /login: Logs in a user.</li> <li>GET /profile: Retrieves the authenticated user's profile.</li> <li>PUT /profile: Updates the authenticated user's profile.</li> <li>POST /logout: Logs out the user.</li> </ul>"},{"location":"backend/routes/auth-routes/#route-details","title":"Route Details","text":""},{"location":"backend/routes/auth-routes/#1-post-register","title":"1. POST /register","text":"<p>Registers a new user by accepting a <code>username</code>, <code>email</code>, and <code>password</code>. The password is hashed before being stored in the database.</p>"},{"location":"backend/routes/auth-routes/#request","title":"Request","text":"<ul> <li> <p>Method: <code>POST</code></p> </li> <li> <p>Body:</p> </li> <li><code>username</code>: The username of the user (string).</li> <li><code>email</code>: The email address of the user (string).</li> <li><code>password</code>: The password chosen by the user (string).</li> </ul>"},{"location":"backend/routes/auth-routes/#logic","title":"Logic","text":"<ol> <li>The password is hashed using bcrypt before storing it in the database.</li> <li>The user details are inserted into the <code>users</code> table.</li> </ol>"},{"location":"backend/routes/auth-routes/#response","title":"Response","text":"<ul> <li>Status: <code>201 Created</code> if successful.</li> <li>Body:</li> <li><code>message</code>: Success message indicating user registration was successful.</li> </ul>"},{"location":"backend/routes/auth-routes/#example","title":"Example","text":"<pre><code>{\n  \"message\": \"User registered successfully\"\n}\n</code></pre>"},{"location":"backend/routes/auth-routes/#error-responses","title":"Error Responses","text":"<ul> <li>500 Internal Server Error: If an error occurs while interacting with the   database.</li> </ul>"},{"location":"backend/routes/auth-routes/#2-post-login","title":"2. POST /login","text":"<p>Logs in a user by accepting a <code>username</code> and <code>password</code>. The password is compared to the stored hashed password in the database.</p>"},{"location":"backend/routes/auth-routes/#request_1","title":"Request","text":"<ul> <li>Method: <code>POST</code></li> <li>Body:</li> <li><code>username</code>: The username of the user (string).</li> <li><code>password</code>: The password provided by the user (string).</li> </ul>"},{"location":"backend/routes/auth-routes/#logic_1","title":"Logic","text":"<ol> <li>The system looks up the user by <code>username</code> in the database.</li> <li>The password is compared using bcrypt to ensure it matches the stored hash.</li> <li>If successful, the user's session is created.</li> </ol>"},{"location":"backend/routes/auth-routes/#response_1","title":"Response","text":"<ul> <li>Status: <code>200 OK</code> if successful.</li> <li>Body:</li> <li><code>message</code>: Success message indicating login was successful.</li> </ul>"},{"location":"backend/routes/auth-routes/#example_1","title":"Example","text":"<pre><code>{\n  \"message\": \"Login successful\"\n}\n</code></pre>"},{"location":"backend/routes/auth-routes/#error-responses_1","title":"Error Responses","text":"<ul> <li>401 Unauthorized: If the credentials are invalid.</li> <li>500 Internal Server Error: If a database error occurs.</li> </ul>"},{"location":"backend/routes/auth-routes/#3-get-profile","title":"3. GET /profile","text":"<p>Retrieves the authenticated user's profile information. This route requires the user to be logged in (i.e., a valid session exists).</p>"},{"location":"backend/routes/auth-routes/#request_2","title":"Request","text":"<ul> <li>Method: <code>GET</code></li> <li>Headers:</li> <li><code>Authorization</code>: Required. The user must be logged in with a valid session.</li> </ul>"},{"location":"backend/routes/auth-routes/#logic_2","title":"Logic","text":"<ol> <li>The route checks if the user is authenticated by verifying the existence of a    <code>userId</code> in the session.</li> <li>If the user is authenticated, their profile information is retrieved from the    <code>users</code> table in the database.</li> </ol>"},{"location":"backend/routes/auth-routes/#response_2","title":"Response","text":"<ul> <li>Status: <code>200 OK</code> if successful.</li> <li>Body: The profile details of the authenticated user.</li> </ul>"},{"location":"backend/routes/auth-routes/#example_2","title":"Example","text":"<pre><code>{\n  \"id\": 1,\n  \"username\": \"johndoe\",\n  \"email\": \"johndoe@example.com\"\n}\n</code></pre>"},{"location":"backend/routes/auth-routes/#error-responses_2","title":"Error Responses","text":"<ul> <li>401 Unauthorized: If the user is not authenticated.</li> <li>404 Not Found: If the user does not exist in the database.</li> <li>500 Internal Server Error: If an error occurs while retrieving the user   from the database.</li> </ul>"},{"location":"backend/routes/auth-routes/#4-put-profile","title":"4. PUT /profile","text":"<p>Updates the authenticated user's profile. This route allows users to update their <code>username</code>, <code>email</code>, and password. The current password is required for changing the password.</p>"},{"location":"backend/routes/auth-routes/#request_3","title":"Request","text":"<ul> <li>Method: <code>PUT</code></li> <li>Body:</li> <li><code>username</code>: The new username for the user (string).</li> <li><code>email</code>: The new email address for the user (string).</li> <li><code>currentPassword</code>: The current password for authentication (string).</li> <li><code>newPassword</code>: The new password for the user (optional, string).</li> </ul>"},{"location":"backend/routes/auth-routes/#logic_3","title":"Logic","text":"<ol> <li>The route verifies that the user is authenticated by checking the <code>userId</code> in    the session.</li> <li>The current password is verified against the stored password.</li> <li>If the password is correct, the profile (username, email, and password) is    updated.</li> </ol>"},{"location":"backend/routes/auth-routes/#response_3","title":"Response","text":"<ul> <li>Status: <code>200 OK</code> if successful.</li> <li>Body:</li> <li><code>message</code>: Success message indicating the profile was updated.</li> </ul>"},{"location":"backend/routes/auth-routes/#example_3","title":"Example","text":"<pre><code>{\n  \"message\": \"Profile updated\"\n}\n</code></pre>"},{"location":"backend/routes/auth-routes/#error-responses_3","title":"Error Responses","text":"<ul> <li>401 Unauthorized: If the user is not authenticated.</li> <li>400 Bad Request: If the current password is not provided.</li> <li>404 Not Found: If the user is not found in the database.</li> <li>401 Unauthorized: If the current password is incorrect.</li> <li>500 Internal Server Error: If an error occurs while updating the profile   in the database.</li> </ul>"},{"location":"backend/routes/auth-routes/#5-post-logout","title":"5. POST /logout","text":"<p>Logs out the authenticated user by destroying the session.</p>"},{"location":"backend/routes/auth-routes/#request_4","title":"Request","text":"<ul> <li>Method: <code>POST</code></li> </ul>"},{"location":"backend/routes/auth-routes/#logic_4","title":"Logic","text":"<ol> <li>The session is destroyed, effectively logging the user out.</li> </ol>"},{"location":"backend/routes/auth-routes/#response_4","title":"Response","text":"<ul> <li>Status: <code>200 OK</code> if successful.</li> <li>Body:</li> <li><code>message</code>: Success message indicating the user has been logged out.</li> </ul>"},{"location":"backend/routes/auth-routes/#example_4","title":"Example","text":"<pre><code>{\n  \"message\": \"Logout successful\"\n}\n</code></pre>"},{"location":"backend/routes/auth-routes/#error-responses_4","title":"Error Responses","text":"<ul> <li>500 Internal Server Error: If an error occurs while destroying the   session.</li> </ul>"},{"location":"backend/routes/auth-routes/#conclusion","title":"Conclusion","text":"<p>These routes handle core authentication functionality, including user registration, login, profile management, and logout. They ensure secure and efficient handling of user data using bcrypt for password hashing and secure session management.</p>"},{"location":"backend/routes/lessons-routes/","title":"Lessons Routes","text":"<p>This document provides an overview of the lessons routes in the application. These routes handle CRUD operations (Create, Read, Update, and Delete) for managing lessons in the database. The routes are defined using Express.js and interact with a SQLite database.</p>"},{"location":"backend/routes/lessons-routes/#routes-overview","title":"Routes Overview","text":"<p>The routes in this section are part of the lessonsRoutes and are responsible for managing lessons in the system. The following operations are supported:</p> <ul> <li>POST /lessons: Create a new lesson.</li> <li>GET /lessons: Retrieve all lessons.</li> <li>GET /lessons/:id: Retrieve a specific lesson by ID.</li> <li>PUT /lessons/:id: Update a specific lesson by ID.</li> <li>DELETE /lessons/:id: Delete a specific lesson by ID.</li> </ul>"},{"location":"backend/routes/lessons-routes/#route-details","title":"Route Details","text":""},{"location":"backend/routes/lessons-routes/#1-post-lessons","title":"1. POST /lessons","text":"<p>Creates a new lesson by accepting <code>title</code>, <code>description</code>, <code>date</code>, <code>teacher</code>, <code>language</code>, <code>explanation</code>, and <code>content</code>. This route inserts the provided lesson data into the database.</p>"},{"location":"backend/routes/lessons-routes/#request","title":"Request","text":"<ul> <li>Method: <code>POST</code></li> <li>Body:</li> <li><code>title</code>: The title of the lesson (string).</li> <li><code>description</code>: A brief description of the lesson (string).</li> <li><code>date</code>: The date of the lesson (string, e.g., \"YYYY-MM-DD\").</li> <li><code>teacher</code>: The name of the teacher conducting the lesson (string).</li> <li><code>language</code>: The language in which the lesson is taught (string).</li> <li><code>explanation</code>: Explanation or summary of the lesson (string).</li> <li><code>content</code>: The content of the lesson (string).</li> </ul>"},{"location":"backend/routes/lessons-routes/#logic","title":"Logic","text":"<ol> <li>The provided lesson data is inserted into the <code>lessons</code> table in the    database.</li> </ol>"},{"location":"backend/routes/lessons-routes/#response","title":"Response","text":"<ul> <li>Status: <code>201 Created</code> if successful.</li> <li>Body:</li> <li><code>id</code>: The ID of the newly created lesson.</li> <li><code>message</code>: Success message indicating the lesson was created.</li> </ul>"},{"location":"backend/routes/lessons-routes/#example","title":"Example","text":"<pre><code>{\n  \"id\": 1,\n  \"message\": \"Lesson created successfully\"\n}\n</code></pre>"},{"location":"backend/routes/lessons-routes/#error-responses","title":"Error Responses","text":"<ul> <li>500 Internal Server Error: If an error occurs while interacting with the   database.</li> </ul>"},{"location":"backend/routes/lessons-routes/#2-get-lessons","title":"2. GET /lessons","text":"<p>Retrieves all lessons from the database. This route returns a list of lessons.</p>"},{"location":"backend/routes/lessons-routes/#request_1","title":"Request","text":"<ul> <li>Method: <code>GET</code></li> </ul>"},{"location":"backend/routes/lessons-routes/#logic_1","title":"Logic","text":"<ol> <li>The route retrieves all records from the <code>lessons</code> table.</li> </ol>"},{"location":"backend/routes/lessons-routes/#response_1","title":"Response","text":"<ul> <li>Status: <code>200 OK</code> if successful.</li> <li>Body: A list of all lessons.</li> </ul>"},{"location":"backend/routes/lessons-routes/#example_1","title":"Example","text":"<pre><code>[\n  {\n    \"id\": 1,\n    \"title\": \"Lesson 1\",\n    \"description\": \"Introduction to Node.js\",\n    \"date\": \"2025-02-25\",\n    \"teacher\": \"John Doe\",\n    \"language\": \"English\",\n    \"explanation\": \"This lesson covers basic Node.js concepts.\",\n    \"content\": \"Content of the lesson\"\n  },\n  {\n    \"id\": 2,\n    \"title\": \"Lesson 2\",\n    \"description\": \"Advanced Node.js\",\n    \"date\": \"2025-03-01\",\n    \"teacher\": \"Jane Smith\",\n    \"language\": \"English\",\n    \"explanation\": \"This lesson dives deep into advanced Node.js topics.\",\n    \"content\": \"Content of the lesson\"\n  }\n]\n</code></pre>"},{"location":"backend/routes/lessons-routes/#error-responses_1","title":"Error Responses","text":"<ul> <li>500 Internal Server Error: If an error occurs while retrieving lessons   from the database.</li> </ul>"},{"location":"backend/routes/lessons-routes/#3-get-lessonsid","title":"3. GET /lessons/:id","text":"<p>Retrieves a specific lesson by its ID. This route returns the lesson data for a given ID.</p>"},{"location":"backend/routes/lessons-routes/#request_2","title":"Request","text":"<ul> <li>Method: <code>GET</code></li> <li>Parameters:</li> <li><code>id</code>: The ID of the lesson to retrieve (integer).</li> </ul>"},{"location":"backend/routes/lessons-routes/#logic_2","title":"Logic","text":"<ol> <li>The route looks for the lesson in the <code>lessons</code> table by its <code>id</code>.</li> </ol>"},{"location":"backend/routes/lessons-routes/#response_2","title":"Response","text":"<ul> <li>Status: <code>200 OK</code> if successful.</li> <li>Body: The lesson data.</li> </ul>"},{"location":"backend/routes/lessons-routes/#example_2","title":"Example","text":"<pre><code>{\n  \"id\": 1,\n  \"title\": \"Lesson 1\",\n  \"description\": \"Introduction to Node.js\",\n  \"date\": \"2025-02-25\",\n  \"teacher\": \"John Doe\",\n  \"language\": \"English\",\n  \"explanation\": \"This lesson covers basic Node.js concepts.\",\n  \"content\": \"Content of the lesson\"\n}\n</code></pre>"},{"location":"backend/routes/lessons-routes/#error-responses_2","title":"Error Responses","text":"<ul> <li>404 Not Found: If the lesson with the specified ID does not exist.</li> <li>500 Internal Server Error: If an error occurs while retrieving the lesson   from the database.</li> </ul>"},{"location":"backend/routes/lessons-routes/#4-put-lessonsid","title":"4. PUT /lessons/:id","text":"<p>Updates an existing lesson by its ID. This route allows you to modify the <code>title</code>, <code>description</code>, <code>date</code>, <code>teacher</code>, <code>language</code>, <code>explanation</code>, and <code>content</code> of a lesson.</p>"},{"location":"backend/routes/lessons-routes/#request_3","title":"Request","text":"<ul> <li>Method: <code>PUT</code></li> <li>Parameters:</li> <li><code>id</code>: The ID of the lesson to update (integer).</li> <li>Body:</li> <li><code>title</code>: The new title of the lesson (string).</li> <li><code>description</code>: The new description of the lesson (string).</li> <li><code>date</code>: The new date of the lesson (string, e.g., \"YYYY-MM-DD\").</li> <li><code>teacher</code>: The new teacher's name (string).</li> <li><code>language</code>: The new language of the lesson (string).</li> <li><code>explanation</code>: The new explanation of the lesson (string).</li> <li><code>content</code>: The new content of the lesson (string).</li> </ul>"},{"location":"backend/routes/lessons-routes/#logic_3","title":"Logic","text":"<ol> <li>The route looks for the lesson in the <code>lessons</code> table by its <code>id</code>.</li> <li>If the lesson is found, it updates the lesson with the provided details.</li> </ol>"},{"location":"backend/routes/lessons-routes/#response_3","title":"Response","text":"<ul> <li>Status: <code>200 OK</code> if successful.</li> <li>Body:</li> <li><code>message</code>: Success message indicating the lesson was updated.</li> </ul>"},{"location":"backend/routes/lessons-routes/#example_3","title":"Example","text":"<pre><code>{\n  \"message\": \"Lesson updated successfully\"\n}\n</code></pre>"},{"location":"backend/routes/lessons-routes/#error-responses_3","title":"Error Responses","text":"<ul> <li>404 Not Found: If the lesson with the specified ID does not exist.</li> <li>500 Internal Server Error: If an error occurs while updating the lesson in   the database.</li> </ul>"},{"location":"backend/routes/lessons-routes/#5-delete-lessonsid","title":"5. DELETE /lessons/:id","text":"<p>Deletes a specific lesson by its ID. This route removes the lesson from the database.</p>"},{"location":"backend/routes/lessons-routes/#request_4","title":"Request","text":"<ul> <li>Method: <code>DELETE</code></li> <li>Parameters:</li> <li><code>id</code>: The ID of the lesson to delete (integer).</li> </ul>"},{"location":"backend/routes/lessons-routes/#logic_4","title":"Logic","text":"<ol> <li>The route looks for the lesson in the <code>lessons</code> table by its <code>id</code>.</li> <li>If the lesson is found, it is deleted from the table.</li> </ol>"},{"location":"backend/routes/lessons-routes/#response_4","title":"Response","text":"<ul> <li>Status: <code>200 OK</code> if successful.</li> <li>Body:</li> <li><code>message</code>: Success message indicating the lesson was deleted.</li> </ul>"},{"location":"backend/routes/lessons-routes/#example_4","title":"Example","text":"<pre><code>{\n  \"message\": \"Lesson deleted successfully\"\n}\n</code></pre>"},{"location":"backend/routes/lessons-routes/#error-responses_4","title":"Error Responses","text":"<ul> <li>404 Not Found: If the lesson with the specified ID does not exist.</li> <li>500 Internal Server Error: If an error occurs while deleting the lesson   from the database.</li> </ul>"},{"location":"backend/routes/lessons-routes/#conclusion","title":"Conclusion","text":"<p>These routes provide essential CRUD operations for managing lessons in the application. They enable users to create, retrieve, update, and delete lesson data in a simple and efficient manner. The interactions with the database are handled using prepared statements to prevent SQL injection and ensure data integrity.</p>"},{"location":"frontend/","title":"Frontend Service","text":""},{"location":"frontend/#overview","title":"Overview","text":"<p><code>frontend.js</code> is a Node.js server-side application using the Express framework. It serves the home page (<code>index.pug</code>) and serves static files such as CSS, JavaScript, and images. This server listens on port 3000 and uses the Pug template engine to render views.</p>"},{"location":"frontend/#dependencies","title":"Dependencies","text":"<ul> <li><code>express</code>: A minimal web application framework for Node.js used to handle   routing, middleware, and request/response handling.</li> <li><code>path</code>: A core Node.js module used to handle and transform file paths.</li> <li><code>body-parser</code>: A middleware used to parse incoming request bodies in JSON   format.</li> <li><code>pug</code>: A templating engine for rendering dynamic HTML pages on the server.</li> </ul>"},{"location":"frontend/#code-breakdown","title":"Code Breakdown","text":""},{"location":"frontend/#1-importing-modules","title":"1. Importing Modules","text":"<pre><code>const express = require(\"express\");\nconst path = require(\"path\");\nconst bodyParser = require(\"body-parser\");\nconst port = 3000;\n</code></pre> <ul> <li><code>express</code>: Imports the Express framework to handle HTTP requests and   server-side routing.</li> <li><code>path</code>: Provides utilities for working with file and directory paths.</li> <li><code>body-parser</code>: Used to parse incoming JSON data in HTTP requests.</li> <li><code>port</code>: Sets the port number on which the application will listen (3000).</li> </ul>"},{"location":"frontend/#2-initialize-express-application","title":"2. Initialize Express Application","text":"<pre><code>const app = express();\n</code></pre> <ul> <li>Creates an instance of an Express application to handle routing and   middleware.</li> </ul>"},{"location":"frontend/#3-middleware-configuration","title":"3. Middleware Configuration","text":"<pre><code>app.use(bodyParser.json());\n</code></pre> <ul> <li>Configures Express to use <code>body-parser</code> to parse JSON bodies in incoming HTTP   requests.</li> </ul>"},{"location":"frontend/#4-set-view-engine-and-views-directory","title":"4. Set View Engine and Views Directory","text":"<pre><code>app.set(\"view engine\", \"pug\");\napp.set(\"views\", path.join(__dirname, \"./views\"));\n</code></pre> <ul> <li>Sets Pug as the view engine to render <code>.pug</code> files.</li> <li>Configures the views directory where Pug templates are stored. The <code>__dirname</code>   points to the current directory where <code>frontend.js</code> is located, and it joins   the path to the <code>views</code> folder.</li> </ul>"},{"location":"frontend/#5-serve-static-files","title":"5. Serve Static Files","text":"<pre><code>app.use(express.static(path.join(__dirname, \"./\")));\n</code></pre> <ul> <li>Uses <code>express.static</code> middleware to serve static files (CSS, JavaScript,   images) from the root directory.</li> </ul>"},{"location":"frontend/#6-custom-middleware","title":"6. Custom Middleware","text":"<pre><code>const logRequest = (req, res, next) =&gt; {\n  console.log(`Received a ${req.method} request from ${req.ip}`);\n  next();\n};\napp.use(logRequest);\n</code></pre> <ul> <li>Defines a middleware function <code>logRequest</code> that logs the type of HTTP request   (GET, POST, etc.) and the IP address of the requester.</li> <li>The <code>next()</code> function passes control to the next middleware function or route   handler.</li> </ul>"},{"location":"frontend/#7-route-configuration","title":"7. Route Configuration","text":"<pre><code>app.get(\"/\", (req, res) =&gt; {\n  res.render(\"index\");\n});\n</code></pre> <ul> <li>Configures a route for the root URL (<code>/</code>).</li> <li>When the root URL is requested, the server will render the <code>index.pug</code>   template.</li> </ul>"},{"location":"frontend/#8-start-the-server","title":"8. Start the Server","text":"<pre><code>app.listen(port, () =&gt; {\n  console.log(`Server is running on http://localhost:${port}`);\n});\n</code></pre> <ul> <li>Starts the Express server on the specified port (<code>3000</code>).</li> <li>Logs a message to the console indicating that the server is running and   accessible via <code>http://localhost:3000</code>.</li> </ul>"},{"location":"frontend/#how-it-works","title":"How It Works","text":"<ol> <li>Routing: When a user visits <code>http://localhost:3000</code>, the server responds    with the <code>index.pug</code> template, which is rendered into HTML.</li> <li>Serving Static Files: The server serves static files such as CSS, images,    and JavaScript from the root directory, making them accessible in the    browser.</li> <li>Logging Requests: Each incoming HTTP request is logged, including the    type of request and the IP address of the requester.</li> <li>Rendering Views: Pug templates are used to dynamically render the HTML    pages on the server side, allowing for dynamic content generation.</li> </ol>"},{"location":"frontend/#usage","title":"Usage","text":"<ol> <li>Install the required dependencies by running the following command:</li> </ol> <pre><code>npm install express path body-parser pug\n</code></pre> <ol> <li>Start the server by running:</li> </ol> <pre><code>node frontend.js\n</code></pre> <ol> <li>Visit <code>http://localhost:3000</code> in your browser to view the home page.</li> </ol>"},{"location":"frontend/#conclusion","title":"Conclusion","text":"<p><code>frontend.js</code> sets up a simple Node.js server using Express, which renders a dynamic home page using Pug and serves static files. It logs incoming requests, making it easier to debug and monitor server activity.</p>"},{"location":"infrastructure/","title":"Application Infrastructure","text":""},{"location":"infrastructure/#overview","title":"Overview","text":"<p>This documentation outlines the technical details for setting up the infrastructure of an application using Docker Compose. The infrastructure consists of two primary services:</p> <ul> <li>Backend - A Node.js-based backend service.</li> <li>Frontend - A Node.js-based frontend service.</li> </ul> <p>Both services are containerized using Docker and orchestrated using Docker Compose. The services communicate internally on the same Docker network and expose ports for external access.</p>"},{"location":"infrastructure/#docker-compose-setup","title":"Docker Compose Setup","text":"<p>The <code>docker-compose.yml</code> file provides the configuration to define, configure, and run multi-container Docker applications. The file below contains configurations for the <code>node-backend</code> and <code>node-frontend</code> services.</p>"},{"location":"infrastructure/#key-elements","title":"Key Elements","text":"<ul> <li><code>version</code>: Specifies the version of the Docker Compose syntax.</li> <li><code>services</code>: Defines the services (containers) in the application.</li> <li><code>node-backend</code>: The backend service, configured to run on port 5001.</li> <li><code>node-frontend</code>: The frontend service, configured to run on port 3000.</li> <li><code>container_name</code>: Specifies the name of the container within Docker.</li> <li><code>build.context</code>: Defines the directory containing the Dockerfile for   building the respective container.</li> <li><code>ports</code>: Exposes container ports to the host machine.</li> <li><code>environment</code>: Defines environment variables for the services.</li> <li><code>restart</code>: Ensures services are automatically restarted in case of   failure.</li> </ul>"},{"location":"infrastructure/#backend-dockerfile","title":"Backend Dockerfile","text":"<p>The Dockerfile for the backend service specifies the steps needed to create the backend image. Below is the detailed configuration:</p>"},{"location":"infrastructure/#breakdown","title":"Breakdown","text":"<ul> <li><code>FROM node</code>: Uses the official Node.js image as the base for the container.</li> <li><code>WORKDIR /app</code>: Sets the working directory inside the container to <code>/app</code>.</li> <li><code>COPY package.json /app</code>: Copies the <code>package.json</code> file into the container to   install dependencies.</li> <li><code>RUN npm install</code>: Installs the dependencies listed in <code>package.json</code>.</li> <li><code>COPY . /app</code>: Copies the rest of the backend files into the container.</li> <li><code>CMD [\"node\", \"backend.js\"]</code>: The entry point for running the backend   application, using the <code>backend.js</code> file.</li> </ul>"},{"location":"infrastructure/#frontend-dockerfile","title":"Frontend Dockerfile","text":"<p>The Dockerfile for the frontend service specifies the steps needed to create the frontend image. Below is the detailed configuration:</p>"},{"location":"infrastructure/#breakdown_1","title":"Breakdown","text":"<ul> <li><code>FROM node</code>: Uses the official Node.js image as the base for the container.</li> <li><code>WORKDIR /app</code>: Sets the working directory inside the container to <code>/app</code>.</li> <li><code>COPY package.json /app</code>: Copies the <code>package.json</code> file into the container to   install dependencies.</li> <li><code>RUN npm install</code>: Installs the dependencies listed in <code>package.json</code>.</li> <li><code>COPY . /app</code>: Copies the rest of the frontend files into the container.</li> <li><code>CMD [\"node\", \"frontend.js\"]</code>: The entry point for running the frontend   application, using the <code>frontend.js</code> file.</li> </ul>"},{"location":"infrastructure/#service-configuration","title":"Service Configuration","text":""},{"location":"infrastructure/#backend-service-configuration","title":"Backend Service Configuration","text":"<ul> <li>Container Name: <code>backend</code></li> <li>Build Context: <code>./backend</code> (Path to the backend application directory)</li> <li>Ports: Exposes port <code>5001</code> from the container to port <code>5001</code> on the host.</li> <li>Restart Policy: Always restart the service if it fails or stops   unexpectedly.</li> </ul>"},{"location":"infrastructure/#frontend-service-configuration","title":"Frontend Service Configuration","text":"<ul> <li>Container Name: <code>frontend</code></li> <li>Build Context: <code>./frontend</code> (Path to the frontend application directory)</li> <li>Ports: Exposes port <code>3000</code> from the container to port <code>3000</code> on the host.</li> <li>Restart Policy: Always restart the service if it fails or stops   unexpectedly.</li> </ul>"}]}